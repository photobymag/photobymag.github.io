name: Deploy to GitHub Pages

on:
  # 'main' 브랜치로 푸시할 때마다 워크플로를 트리거합니다.
  # 다른 브랜치 이름을 사용하시나요? `main`을 브랜치 이름으로 바꾸세요.
  push:
    branches: [ main ]
  # GitHub의 Actions 탭에서 이 워크플로를 수동으로 실행할 수 있습니다.
  workflow_dispatch:

# Allow this job to clone the repo and create a page deployment
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 저장소를 체크아웃합니다.
      - name: Checkout your repository using git
        uses: actions/checkout@v4
        
      # Node.js 모듈을 캐시합니다. package-lock.json 파일을 기준으로 캐시합니다.
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      # Astro 빌드 결과물을 캐시합니다. 전체 파일 구조를 기준으로 캐시합니다.
      - name: Cache Astro build output
        uses: actions/cache@v3
        with:
          path: dist
          key: ${{ runner.os }}-astro-${{ hashFiles('**/*') }}
          restore-keys: |
            ${{ runner.os }}-astro-

      # 종속성을 설치합니다.
      - name: Install dependencies
        run: npm install
        
      # 사이트를 빌드합니다.
      - name: Build the site
        run: npm run build

      # 빌드된 파일을 업로드합니다.
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: github-pages
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      # 저장소를 체크아웃합니다.
      - name: Checkout your repository using git
        uses: actions/checkout@v4
      
      # 빌드된 파일을 다운로드합니다.
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: github-pages

      # GitHub Pages에 배포합니다.
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
